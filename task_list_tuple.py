# # Tasks for lesson on the topic of "list() | tuple()"
# *Beginner level*
# 1. Створіть список на основі введеної послідовності цілих чисел і надрукуйте другу половину списку. Якщо кількість не парна, то вивести більшу кількість.
# lst1 = input("Enter data: ")
# lst1 = lst1.split()
# print(lst1[(len(lst1) // 2):])

# 2. Створіть список на основі введеної послідовності цілих чисел і надрукуйте його елементи таким чином: два останні елементи переміщені з кінця в початок списку без зміни їх початкового порядку.
# lst2 = input("Enter data: ")
# lst2 = lst2.split()
# lst22 = lst2[(len(lst2) - 2):]
# lst22.extend(lst2[: (len(lst2) - 2)]) 
# print(lst22)

# 3. Збережіть назви мов світу, які вводяться в одному рядку через пропуск, у списку. Простежте за тим, щоб елементи у списку не зберігались в алфавітному порядку. Відсортуйте список в алфавітному порядку і виведіть його елементи в рядку через пропуск.
str_lan = "Deutsch Englisch Ukrainian Serbian Danisch"
str_lan = str_lan.split()
str_lan.sort()
# print(" ".join(str_lan))

# 4. Виведіть елементи списку в зворотному порядку, не змінюючи сам список.
# print(str_lan[::-1])

# 5. Виведіть всі елементи списку з парними індексами. Вводиться список чисел. Всі числа списку знаходяться на одному рядку.
str_num = "11 21 15 11 154 11 24 88 85 47"
str_num = str_num.split()
# print(str_num[1::2])

# 6. Визначте, скільки різних слів у введеному рядку.
#     Вхідні дані:
#     New Delhi New York Paris Prague Reykjavik
#     Happy New Year Happy New Year May we all have a vision now and then Of a world where every neighbor is a friend
#     Вихідні дані:
#     6
#     19
def count_dif_word(str_count):
    str_count = str_count.split()
    str_count = set(str_count)
    return len(str_count)
s1 = "New Delhi New York Paris Prague Reykjavik"
s2 = "Happy New Year Happy New Year May we all have a vision now and then Of a world where every neighbor is a friend"
# print(count_dif_word(s1), count_dif_word(s2))

# 7. Напишіть програму, яка приймає послідовність чисел, розділених комами, від користувача і створює список і кортеж з цими числами.
#     Вхідні дані:
#     7, 9, 12, 4
#     Вихідні дані:
#     [7, 9, 12, 4]
#     (7, 9, 12, 4)
str7 = "7, 9, 12, 4"
str7 = str7.split()
# print(str7)
# print(tuple(str7))

# 8. Напишіть програму для отримання частини рядка URL, що позначає назву ресурсу.
#     Вхідні дані:
#     https://www.namesite.com/folder/index.html
#     Вихідні дані:
#     index.html
str8 = "https://www.namesite.com/folder/index.html"
str8 = str8.split("/")
# print(str8[-1])


# *Middle level*
# 9. Для введеної послідовності унікальних цілих чисел, поміняйте місцями мінімальний та максимальний елементи цієї послідовності. Надрукуйте отриманий список.
str9 = "1 22 15 13 57 24 35 77 61 40"
str9 = str9.split()
str91 = str9.copy()
min9 = min(str9)
max9 = max(str9)
str91[str9.index(min9)] = max9
str91[str9.index(max9)] = min9
# print(str91)

# 10. Напишіть програму, яка приймає послідовність рядків (порожній рядок для завершення програми) як вхідний рядок і друкує рядки у верхньому регістрі.
#     Вхідні дані:
#     python
#     ruby
#     go
#     Вихідні дані:
#     PYTHON
#     RUBY
#     GO
# lst10 = []
# while True:
#     s = input("Enter text: ")
#     if s == "":
#         break
#     lst10.append(s.upper())
# for x in lst10:
#     print(x)

# 11. У введеному списку цілих чисел, знайдіть і надрукуйте сусідні елементи, які мають однаковий знак. Якщо такої пари немає, не повинно нічого виводитися.
#     Вхідні дані:
#     1 -2 -3 5 6 -3 7 8
#     Вихідні дані:
#     -2 -3
#     5 6
#     7 8
# str11 = "1 -2 -3 5 6 -3 7 8"
# str11 = list(map(int, str11.split()))
# for i in range(len(str11)-1):
#     if str11[i] * str11[i + 1] > 0:
#         print(str11[i], str11[i + 1])

# 12. Напишіть програму для обчислення добутку цілих чисел (без використання циклу for), які вводяться через пропуск користувачем в одному рядку.
#     Вхідні дані:
#     2 5 3
#     Вихідні дані:
#     30
str12 = "2 5 3"
str12 = list(map(int, str12.split()))
i = 0
mult = 1
while i < len(str12):
    mult *= str12[i]
    i += 1
# print(mult)

# 13. Напишіть програму для друку елементів певного цілочисельного списку після видалення з нього парних чисел. Значення списку вводяться через пропуск в одному рядку.
#     Вхідні дані:
#     3 44 6 8 9 12 7
#     Вихідні дані:
#     [3, 9, 7]
# str13 = "3 44 6 8 9 9 5 12 14 7"
# str13 = list(map(int, str13.split()))
# i, j = 0, 0
# while i < len(str13):
#     if str13[i] % 2 == 0:
#         str13.pop(i)
#     else:
#         i += 1    
# print(str13)

# 14. Напишіть програму, яка приймає послідовність 4-цифрових двійкових чисел, розділених комами, і друкує числа, які ділиться на 5 без остачі, в рядку і розділені комами.
#     Вхідні дані:
#     0100,0011,1010,1001,1100
#     Вихідні дані:
#     1010
# str14 = "0100,0011,1010,1001,1100"
# str14 = str14.split(",")
# str141 = []
# str142 = [] 
# for i in str14:
#     num = int(i[0]) * 8 + int(i[1]) * 4 + int(i[2]) * 2 + int(i[3]) * 1
#     str142.append(num)
#     if num % 5 == 0:
#         str141.append(i)
# print(str141)
# print(str142)

# 15. Ви вирішили написати перетворювач коду на Python в код на Java. Так як на Java прийнятий стандарт найменування CamelCase, то ви вирішили навчитися перетворювати імена з underscore в цей формат. Стиль underscore характеризується тим, що слова в імені пишуться маленькими літерами і розділяються між собою символом підкреслення _. Стиль CamelCase означає, що кожне слово пишеться з великої літери і роздільників між словами немає. Отже, вводиться один рядок, що містить ім’я, записане в форматі underscore. Програма виводить рядок, що містить ім’я в форматі CamelCase.
#     Вхідні дані:
#     my_class
#     c
#     Вихідні дані:
#     MyClass
#     C
# str15 = input("Enter code: \n")
# str15 = str15.split("_")
# str151 = ""
# for i in str15:
#     str151 += i.capitalize()
# print(str151)


# 16. Напишіть програму для видалення кожного третього елемента із цілочисельного списку і друку результуючого списку, доки список не стане порожнім. Початковий список цілих чисел вводиться в одному рядку через пропуск.
#     Вхідні дані:
#     2 5 8 9 4 78 7 1
#     Вихідні дані:
#     [2, 5, 9, 4, 78, 7, 1]
#     [2, 5, 4, 78, 7, 1]
#     [2, 5, 78, 7, 1]
#     [2, 5, 7, 1]
#     [2, 5, 1]
#     [2, 5]
#     [5]
#     []
# str16 = "2 5 8 9 4 78 7 1"
# str16 = list(map(int, str16.split()))
# while len(str16):
#     if len(str16) < 3:
#         str16.pop(len(str16)-1)
#     else:
#         str16.pop(2)
#     print(str16)

# 17. Користувач вводить два цілих додатних числа n і m. Напишіть програму, яка створює двовимірний масив розміром n x m і заповнює його символами . і * у шаховому порядку (як у вихідних даних). Лівий верхній кут повинен мати символ ..
#     Вхідні дані:
#     6 8
#     Вихідні дані:
#     . * . * . * . *
#     * . * . * . * .
#     . * . * . * . *
#     * . * . * . * .
#     . * . * . * . *
#     * . * . * . * .
# n = 6
# m = 8
# for i in range(n):
#     for j in range(m):
#         if (i + j) % 2 == 0:
#             print(". ", end="")
#         else:
#             print("* ", end="")
#     print()

# *Hard level*
# 18. У рядку через кому перераховані слова. Сформувати з цих слів новий рядок. Слова мають бути відсортовані за спаданням (від Z до A) без урахування регістру і записані через пропуск.
#     Вхідні дані:
#     horse, cat, parrot, goldfish, dog
#     Вихідні дані:
#     parrot horse goldfish dog cat
# str18 = "horse, cat, parrot, Goldfish, dog"
# str18= str18.split(", ")
# str18.sort(key=str.lower, reverse=True)
# print(" ".join(str18))


# 19. Напишіть програму, яка виводить частину послідовності `1 2 2 3 3 3 4 4 4 4 5 5 5 5 5...` (число повторюється стільки разів, чому дорівнює). На вхід програми передається невід’ємне ціле число `n` - стільки елементів послідовності повинна надрукувати програма. На виході очікується послідовність чисел, записаних через пропуск в один рядок.
#     Вхідні дані:
#     8
#     Вихідні дані:
#     1 2 2 3 3 3 4 4
# num19 = int(input("Enter number: "))
# i = 0
# j = 1
# res = ""
# while i < num19:
#     res += (str(j) + " ") * j
#     i += j
#     j += 1
# print(res[:num19 * 2])    


# 20. Використовуючи поняття списку, напишіть програму, яка створює 3D масив елементів a x b x c, кожен з яких має значення 0. Значення a, b, c вводяться в одному рядку через пропуск.
# Вхідні дані:
# 3 3 2
# 4 4 4
# Вихідні дані:
# [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]
# [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]
# -----------------------------------------------
a, b, c = 3, 3, 2
lst_a = []
for i in range(a):
    lst_b = []
    for j in range(b):
        lst_c = []
        for k in range(c):
            lst_c.append(0)
        lst_b.append(lst_c)
    lst_a.append(lst_b)
# print(lst_a)



# 21. В один ряд поставили `n` кеглів, пронумерувавши їх зліва направо числами від `1` до `n`. Потім в цей ряд кинули `k` куль, при цьому `i`-та куля збила всі кеглі з номерами від `m` до `h` включно. Визначте, які кеглі залишилися стояти на місці. Програма отримує на вхід кількість кеглів `n` і кількість кидків `k`. Далі йде `k` пар чисел `m`, `h`, при цьому `1 ≤ m ≤ h ≤ n ≤ 100`. Програма повинна вивести послідовність з `n` символів, де `j`-й символ є `I`, якщо `j`-та кегля залишилася стояти, або `.`, якщо `j`-та кегля була збита.
#     Вхідні дані:
#     10 3
#     8 10
#     2 5
#     3 6
#     Вихідні дані:
#     I.....I...
str21 = input("Enter data: \n")
str21 = list(map(int, str21.split()))
n = str21[0]
k = str21[1]
result21 = "I" * n
for i in range(k):
    str21 = input("")
    str21 = list(map(int, str21.split()))
    result21 = result21[0: str21[0] - 1] + "*" * (str21[1] - str21[0] +1) + result21[str21[1]:]
print(result21)   