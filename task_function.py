# Tasks for lesson on the topic of "Function def"
# Beginner level
# Напишіть функцію, яка отримує ім’я і друкує вітальне повідомлення Hello, <name>.
def print_hello(name):
    print(f"Hello {name}!")

# Напишіть функцію, яка отримує рядок і ціле число n та повертає n копій заданого рядка.
def print_n_str(text, n):
    return text * n
# print_n_str("Hello", 3)

# Напишіть функцію для обчислення суми двох цілих чисел.
def my_sum(a, b):
    return a+b

# Напишіть функцію для отримання рядка з перших n символів іншого рядка. Якщо довжина рядка менше n, поверніть початковий рядок.
def new_text(text, n):
    if len(text) > n:
        text = text[:n]
    return text

# Напишіть функцію для визначення найбільшого з трьох цілих чисел з використанянм вбудованої функції max().
def my_max(a, b, c):
    return max(a, b, c)

# Напишіть функцію для створення позначок тегів HTML навколо введених рядків. Функція отримує назву тега HTML і рядок, який необхідно помістити у відповідні теги.
# Вхідні дані:
# strong Python
# Вихідні дані:
# <strong>Python</strong>
def create_tags(tag, text):
    return f"<{tag}>{text}</{tag}>"

# Напишіть функцію, яка повертає назву пори року для введеного значення номера місяця.
def season(month):
    result = ""
    match month:
        case 1, 2, 12:
            result = "Winter"
        case 3, 4, 5:
            result = "Spring"
        case 6, 7, 8:
            result = "Sommer"
        case 9, 10, 11:
            result = "Autumn"
    return result


# Напишіть функцію для створення гістограми (наприклад, у вигляді *) із заданого списку цілих чисел як у вихідних даних. Формат введення списку чисел як у вхідних даних.
# Вхідні дані:
# 2,7,1,4,2,3,9,3
# Вихідні дані:
# **
# *******
# *
# ****
# **
# ***
# *********
# ***
def histogram(list1):
    result = ""
    for elem in list1:
        result += "*" * elem + "\n"
    return result

# Middle level
# Напишіть функцію для визначення, чи рік високосний чи ні.
def leap_year(year):
    result = "No"
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                result = "Yes"
        else: 
            result = "Yes"
    return result

# Напишіть функцію, яка отримує значення середньомісячної кількості опадів по місяцях (в мм) і повертає загальний обсяг опадів протягом року, середньорічну кількість опадів, назви місяців та значення з найвищим та найменшим числом опадів протягом року.
# Вхідні дані:
# 22 22 24 49 72 98 101 82 51 40 36 24
# Вихідні дані:
# (621.0, 51.75, (101.0, 'July'), (22.0, 'January'))
def average_mon_rain(list1):
    month = ("January", "February","March","April","May","June","July","August","September","October","November","December")
    res = f"{sum(list1)}, {sum(list1) / 12}, "
    in_mon_max = list1.index(max(list1))
    in_mon_min = list1.index(min(list1))
    res += f"({list1[in_mon_max]}, {month[in_mon_max]}), ({list1[in_mon_min]}, {month[in_mon_min]})"
    return res
# print(average_mon_rain((22, 22, 24, 49, 72, 98, 101, 82, 51, 40, 36, 24)))



# На стадіоні є три категорії місць для сидіння: місця класу A коштують a грошових одиниць, місця класу B коштують b грошових одиниць, а місця класу C - c грошових одиниць. Напишіть першу функцію, яка запитує скільки продано квитків на кожний клас місць, і другу функцію, яка відображає суму отриманого доходу від продажу квитків на кожен клас окремо і загалом. Формати введення і виведення такі, як у вхідних і вихідних даних.
# Вхідні дані:
# A
# 20.50
# 45
# B
# 15.75
# 30
# C
# 10.55
# 15
# Вихідні дані:
# ({'A': 922.5, 'B': 472.5, 'C': 158.25}, 1553.25)



# Напишіть функцію, яка перевіряє, чи рядок є паліндром чи ні. Регістр літер, пропуски і знаки пунктуації не враховувати.
# Паліндром - це слово, фраза або послідовність, яка читається так само як зліва направо, так і справа наліво.
def palindrom(text):
    text = "".join(text.split(" "))
    text = text.lower()
    cleaned_text = ""
    for char in text:
        if char not in ",.!?;:()[]{}1234567890":
            cleaned_text += char
    return cleaned_text == cleaned_text[::-1]
# print(palindrom("yfgfsdg J1JJ1J gd2sfgfy)))"))

# Hard level

# Напишіть рекурсивну функцію, яка обчислює суму цілих чисел a і b. З арифметичних операцій використовується тільки додавання одиниці і віднімання одиниці.
def recurs_sum(a, b):
    if b == 0:
        return a
    else:
        return recurs_sum(a + 1, b - 1)
# print(recurs_sum(4,9))


# Дано послідовність цілих чисел, що закінчується числом 0. Напишіть рекурсивну функцію, яка друкує цю послідовність в зворотному порядку. При розв’язуванні цього завдання не можна користуватися списками.
def recurs_reverse(num):
    if num == "".join(num.split(" ")):
        return print(num)
    else:
        print(num[num.rfind(" ") + 1:], end=" ")
        return recurs_reverse(num[:num.rfind(" ")])
# recurs_reverse("12 11 12 3 55 1 1 5 0")

# У кожної кредитної картки є номер, який надрукований на ній, а також інший номер, вбудований у магнітну стрічку із зворотного боку картки. Цей номер також зберігається у певній базі даних для того, щоб коли вашою карткою розраховуються за покупку, банк знав, з якого рахунку cписувати гроші. У світі багато людей з кредитними картками, і тому ці номери доволі великі: American Express використовує номери із 15 розрядів, MasterCard - з 16, Visa - з 13 або 16. Ці розряди - десяткові (від 0 до 9). Номери кредитних карт мають певну структуру. Номери карток American Express починаються з 34 чи 37; номери карт MasterCard починаються з 51, 52, 53, 54 чи 55 (формально, вони можуть починатись і з деяких інших чисел, але ми не звертатимемо на це уваги в межах нашої задачі); номери карт Visa починаються з 4. Також номери карт мають вбудовану у них контрольну суму, що обраховується за допомогою математичної формули. Тож яка це секретна формула? Більшість карток використовують алгоритм, створений Гансом Петером Луном з IBM (Алгоритм Луна ). Відповідно до цього алгоритму, ви можете перевірити, чи номер кредитної картки є синтаксично коректним, наступним чином. Рядки довжиною 1 або менше не є дійсними. Пропуски дозволені для введення, але їх необхідно видалити перед перевіркою. Усі інші нецифрові символи заборонені.

# Приклад 1: дійсний номер кредитної картки 4539 1488 0343 6467 Перший крок алгоритму Луна - це подвоєння кожної другої цифри, починаючи справа: 4_3_ 1_8_ 0_4_ 6_6_ Якщо подвоєння числа є числом, що перевищує 9, необхідно відняти 9 від добутку. Результати нашого подвоєння, розставлені на свої місця: 8569 2478 0383 3437 Далі необхідно підсумувати всі цифри: 8+5+6+9+2+4+7+8+0+3+8+3+3+4+3+7 = 80 Якщо сума націло ділиться на 10, то число дійсне. Цей номер дійсний!

# Приклад 2: недійсний номер кредитної картки 8273 1232 7352 0569 Подвоєння кожної другої цифри, починаючи справа 7253 2262 5312 0539 Сума цифр 7+2+5+3+2+2+6+2+5+3+1+2+0+5+3+9 = 57 57 націло не ділиться на 10, тому це число недійсне. Напишіть функцію(ї) для валідації номера кредитної картки за алгоритмом Луна і виведення приналежності картки для трьох компаній (American Express, MasterCard, Visa) як у вихідних даних. У разі некоректності номера або невідповідності переліченим компаніям, вивести повідомлення INVALID.
def alg_luna(num):
    num = "".join(num.split())
    double_num = 0
    for i in range(len(num)):
        if i % 2 == 0:
            if int(num[i]) * 2 > 9:
                double_num += int(num[i]) * 2 - 9
            else:
                double_num += int(num[i]) * 2
        else:
            double_num += int(num[i])
    return double_num % 10 == 0
# print(alg_luna("8273 1232 7352 0569"))
def valid_card(num_card):
    name_card = "INVALID"
    switch_mc = (51, 52, 53, 54, 55)
    switch_ac = (34, 37)
    match len("".join(num_card.split())):
        case 13:
            if int(num_card[0]) == 4:
                name_card = "Visa"
        case 16:
            if int(num_card[:2]) in switch_mc:
                name_card = "MasterCard"
            elif int(num_card[0]) == 4:
                name_card = "Visa"
        case 15:
            if int(num_card[:2]) in switch_ac:
                name_card = "American Express"
    if name_card == "INVALID":
        return name_card
    else:
        if alg_luna(num_card) == True:
            return f"Your card is {name_card}"
        else:
            return "INVAlID"
print(valid_card("4539 1488 0343 6467"))
   